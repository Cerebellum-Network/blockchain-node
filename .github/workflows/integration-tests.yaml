name: Integration Tests

on:
  push:
    branches: [dev, staging, master]
  pull_request:
    branches: [dev, staging, master, 'release/**', 'hotfix/**']
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read
  actions: read

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y cargo clang libssl-dev llvm libudev-dev protobuf-compiler make jq

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          target: wasm32-unknown-unknown
          components: rust-src

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2.7.3
        with:
          cache-on-failure: true

      - name: Configure Git for private dependencies
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Build all packages
        run: |
          cargo build --release --features runtime-benchmarks,try-runtime --workspace

      - name: Run comprehensive tests
        run: |
          # Run all workspace tests
          cargo test --workspace --features runtime-benchmarks --release --no-fail-fast

      - name: Test runtime compilation
        run: |
          # Verify WASM runtime builds correctly
          ls -la target/release/wbuild/cere-runtime/
          ls -la target/release/wbuild/cere-dev-runtime/
          
          # Verify WASM files exist and are valid
          test -f target/release/wbuild/cere-runtime/cere_runtime.compact.compressed.wasm
          test -f target/release/wbuild/cere-dev-runtime/cere_dev_runtime.compact.compressed.wasm

      - name: Test chain spec generation
        run: |
          # Test chain spec generation for all networks
          ./target/release/cere build-spec --chain=dev --raw > /tmp/dev-raw.json
          ./target/release/cere build-spec --chain=dev > /tmp/dev-plain.json
          
          # Validate JSON format
          jq . /tmp/dev-raw.json > /dev/null
          jq . /tmp/dev-plain.json > /dev/null
          
          echo "✅ Chain spec generation successful"

      - name: Test basic node functionality
        run: |
          # Start node in background with timeout
          timeout 60s ./target/release/cere --dev --tmp --rpc-port 9944 --ws-port 9945 --port 30334 &
          NODE_PID=$!
          
          # Wait for node startup
          sleep 15
          
          # Test health endpoint
          curl -H "Content-Type: application/json" \
               -d '{"id":1, "jsonrpc":"2.0", "method": "system_health", "params":[]}' \
               http://localhost:9944 > /tmp/health.json
          
          # Verify response
          jq -e '.result.peers >= 0' /tmp/health.json
          echo "✅ Node health check passed"
          
          # Test system info
          curl -H "Content-Type: application/json" \
               -d '{"id":1, "jsonrpc":"2.0", "method": "system_version", "params":[]}' \
               http://localhost:9944 > /tmp/version.json
          
          jq -e '.result' /tmp/version.json
          echo "✅ System version check passed"
          
          # Cleanup
          kill $NODE_PID || true
          wait $NODE_PID || true

      - name: Test pallet functionality
        run: |
          # Test key pallets individually
          echo "Testing core pallets..."
          
          # Test DDC pallets
          cargo test --package pallet-ddc-clusters --features runtime-benchmarks --release
          cargo test --package pallet-ddc-nodes --features runtime-benchmarks --release
          cargo test --package pallet-ddc-staking --features runtime-benchmarks --release
          
          echo "✅ Pallet tests completed"

      - name: Test benchmarks compilation
        run: |
          # Ensure benchmarks compile correctly
          cargo check --features runtime-benchmarks --release --package cere-runtime
          cargo check --features runtime-benchmarks --release --package cere-dev-runtime
          
          echo "✅ Benchmark compilation verified"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-artifacts
          path: |
            /tmp/dev-raw.json
            /tmp/dev-plain.json
            /tmp/health.json
            /tmp/version.json
          retention-days: 7

  compatibility-tests:
    name: Compatibility Tests
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y cargo clang libssl-dev llvm libudev-dev protobuf-compiler

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          target: wasm32-unknown-unknown
          components: rust-src

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2.7.3

      - name: Configure Git for private dependencies
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Test WebAssembly compilation
        run: |
          echo "Testing WASM runtime compilation..."
          cargo build --release --features on-chain-release-build
          
          # Verify WASM files are generated
          ls -la target/release/wbuild/cere-runtime/
          ls -la target/release/wbuild/cere-dev-runtime/
          
          echo "✅ WASM compilation successful"

      - name: Test different feature combinations
        run: |
          # Test compilation with different feature sets
          cargo check --features runtime-benchmarks
          cargo check --features try-runtime
          cargo check --features runtime-benchmarks,try-runtime
          
          echo "✅ Feature compatibility verified"

      - name: Test cross-compilation
        run: |
          # Add musl target for container compatibility
          rustup target add x86_64-unknown-linux-musl
          
          # Test basic compilation with musl
          cargo check --target x86_64-unknown-linux-musl --lib
          
          echo "✅ Cross-compilation verified"
