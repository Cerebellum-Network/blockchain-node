name: PR

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ dev, staging, master, 'release/**', 'hotfix/**' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Security: Restrict permissions to minimum required
permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  format:
    name: Check Lints
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2024-03-12
          override: true
          components: rustfmt
      - name: Check TOML
        uses: dprint/check@v2.2
      - name: Check Format
        run: |
          cargo fmt -- --check

  security-audit:
    name: Security Audit
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Configure Git
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      - name: Basic vulnerability check
        run: |
          # Use cargo tree to check for known vulnerabilities
          cargo tree --duplicates
          echo "‚úÖ Basic dependency check completed"
      - name: Check for known vulnerable crates (manual)
        run: |
          echo "üîç Checking for known vulnerable crate patterns..."
          if grep -r "openssl.*0\." Cargo.toml; then
            echo "‚ö†Ô∏è  Old OpenSSL version detected"
          fi
                    echo "‚úÖ Manual vulnerability patterns check completed"

  # Split cargo check into parallel jobs for faster execution
  check-runtime:
    name: Check Runtime
    needs: format
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - name: Increase swap space
        run: |
          sudo swapoff -a
          sudo fallocate -l 10G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo swapon --show
      - name: Install linux dependencies
        run: sudo apt update && sudo apt install -y cargo clang libssl-dev llvm libudev-dev protobuf-compiler lld
      - name: Install toolchain and rust-src
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          target: wasm32-unknown-unknown
          components: rust-src
      - name: Enhanced Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "runtime-build"
          cache-on-failure: true
      - name: Configure Git
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      - name: Check Runtime Build (Optimized)
        run: |
          # Build with optimizations for speed
          CARGO_INCREMENTAL=1 cargo check --release --features try-runtime --package cere-runtime --package cere-dev-runtime
      - name: Run dev chain
        run: |
          cargo build --release --bin cere
          timeout --preserve-status 30s ./target/release/cere --dev

  check-node:
    name: Check Node
    needs: format
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Install linux dependencies
        run: sudo apt update && sudo apt install -y cargo clang libssl-dev llvm libudev-dev protobuf-compiler lld
      - name: Install toolchain and rust-src
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          target: wasm32-unknown-unknown
          components: rust-src
      - name: Enhanced Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "node-build"
          cache-on-failure: true
      - name: Configure Git
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      - name: Check Node Components
        run: |
          # Check node components in parallel where possible
          CARGO_INCREMENTAL=1 cargo check --release --features runtime-benchmarks --workspace --exclude cere-runtime --exclude cere-dev-runtime

  check-try-runtime:
    name: Try-Runtime Check (Optional)
    needs: format
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    # Only run on specific branches or when manually triggered
    if: |
      github.ref == 'refs/heads/master' || 
      github.ref == 'refs/heads/main' || 
      contains(github.event.head_commit.message, '[try-runtime]') ||
      github.event_name == 'workflow_dispatch'
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Install linux dependencies
        run: sudo apt update && sudo apt install -y cargo clang libssl-dev llvm libudev-dev protobuf-compiler lld
      - name: Install toolchain and rust-src
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          target: wasm32-unknown-unknown
          components: rust-src
      - name: Enhanced Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "runtime-build"
          cache-on-failure: true
      - name: Configure Git
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      - name: Debug CI Environment
        run: |
          echo "CI Environment Variables:"
          echo "CI=$CI"
          echo "CARGO_TERM_COLOR=$CARGO_TERM_COLOR"
          echo "CARGO_INCREMENTAL=$CARGO_INCREMENTAL"
          echo "Available cores: $(nproc)"
          echo "Memory: $(free -h)"
          echo "Disk space: $(df -h)"

      - name: Install try-runtime
        run: cargo install --git https://github.com/paritytech/try-runtime-cli --tag v0.8.0 --locked
      - name: Build for try-runtime
        run: |
          CARGO_INCREMENTAL=1 cargo build --release --features try-runtime
      - name: Check Try-Runtime
        run: |
           try-runtime --runtime ./target/release/wbuild/cere-runtime/cere_runtime.compact.compressed.wasm \
           on-runtime-upgrade --disable-idempotency-checks --blocktime 6000 live --uri wss://archive.qanet.cere.network:443

  clippy:
    name: Run Clippy
    needs: format
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - name: Install linux dependencies
        run: sudo apt update && sudo apt install -y cargo clang libssl-dev llvm libudev-dev protobuf-compiler lld
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          target: wasm32-unknown-unknown
          components: rust-src, clippy
      - name: Enhanced Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "clippy-build"
          cache-on-failure: true
      - name: Configure Git
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      - name: Check with Clippy (Optimized)
        run: |
          # Run clippy with incremental compilation
          CARGO_INCREMENTAL=1 cargo clippy --no-deps --all-targets --features runtime-benchmarks,try-runtime --workspace -- --deny warnings

  tests:
    name: Run tests
    needs: format
    # The type of runner that the job will run on
    runs-on: ubuntu-24.04
    timeout-minutes: 120
    env:
      CARGO_TERM_COLOR: always
      CARGO_INCREMENTAL: 1
      CI: true
      RUSTFLAGS: "-C link-arg=-fuse-ld=mold -C linker=clang -C link-arg=-Wl,--no-keep-memory"
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Increase swap space
        run: |
          sudo swapoff -a
          sudo fallocate -l 10G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo swapon --show
      - name: Install linux dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cargo clang libssl-dev llvm libudev-dev protobuf-compiler make lld pkg-config
          sudo apt install -y libc6-dev gcc-multilib
          
          # Install mold linker (faster and more memory efficient)
          git clone https://github.com/rui314/mold.git
          cd mold
          git checkout v1.11.0
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ ..
          cmake --build . -j $(nproc)
          sudo cmake --install .
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          target: wasm32-unknown-unknown
          components: rust-src
      - name: Configure Git
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      - name: Clean previous builds
        run: |
          cargo clean
          rm -rf target/
      - name: Enhanced Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test-build"
          cache-on-failure: true
      # Temporarily disable cargo-tarpaulin due to linking issues
      # - name: Install cargo-tarpaulin
      #   run: cargo install cargo-tarpaulin --version 0.22.0
      # - name: Run cargo-tarpaulin
      #   run: cargo tarpaulin --verbose --workspace --timeout 300 --exclude-files "target/*" --exclude-files "*/build.rs"
      - name: Run tests (split into smaller chunks)
        run: |
          # Run tests in smaller chunks to reduce memory usage
          echo "Running runtime tests..."
          cargo test --verbose --locked --no-fail-fast -p cere-runtime --features runtime-benchmarks --jobs 1
          
          echo "Running node tests..."
          cargo test --verbose --locked --no-fail-fast -p cere-cli -p cere-client -p cere-service --features runtime-benchmarks --jobs 1
          
          echo "Running pallets tests..."
          cargo test --verbose --locked --no-fail-fast --package "*ddc*" --features runtime-benchmarks --jobs 1 -- --skip mock_clusters_gov::__construct_runtime_integrity_test::runtime_integrity_tests
          
          echo "Running remaining tests..."
          cargo test --verbose --locked --no-fail-fast --workspace --exclude "*ddc*" --exclude cere-runtime --exclude cere-cli --exclude cere-client --exclude cere-service --features runtime-benchmarks --jobs 1
