name: PR

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ dev, staging, master, 'release/**', 'hotfix/**' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Security: Restrict permissions to minimum required
permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  format:
    name: Check Lints
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2024-03-12
          override: true
          components: rustfmt
      - name: Check TOML
        uses: dprint/check@v2.2
      - name: Check Format
        run: |
          cargo fmt -- --check

  check:
    name: Cargo check
    needs: format
    runs-on: ubuntu-24.04
    timeout-minutes: 75
    env:
      CARGO_TERM_COLOR: always
      CARGO_INCREMENTAL: 1
      RUST_BACKTRACE: 1
      CI: true
    steps:
      - uses: actions/checkout@v4
      - name: Install linux dependencies
        run: sudo apt update && sudo apt install -y cargo clang libssl-dev llvm libudev-dev protobuf-compiler lld
      - name: Install toolchain and rust-src
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          target: wasm32-unknown-unknown
          components: rust-src
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.3
        with:
          cache-on-failure: true
          cache-all-crates: true
      - name: Configure Git
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      - name: Debug CI Environment
        run: |
          echo "CI Environment Variables:"
          echo "CI=$CI"
          echo "CARGO_TERM_COLOR=$CARGO_TERM_COLOR"
          echo "CARGO_INCREMENTAL=$CARGO_INCREMENTAL"
          echo "Available cores: $(nproc)"
          echo "Memory: $(free -h)"
          echo "Disk space: $(df -h)"
      - name: Install try-runtime (cached)
        uses: Swatinem/rust-cache@v2.7.3
        with:
          cache-on-failure: true
          key: try-runtime-v0.8.0
      - name: Install try-runtime
        run: cargo install --git https://github.com/paritytech/try-runtime-cli --tag v0.8.0 --locked
      - name: Check Core Components (fast)
        run: |
          # Check core components first (faster feedback)
          cargo check --package cere-runtime --package cere-dev-runtime --profile fast-ci
          cargo check --package cere-cli --package cere-service --profile fast-ci
      - name: Check Build for Benchmarking
        run: |
          pushd node &&
          cargo check --features=runtime-benchmarks --profile fast-ci
      - name: Build Runtime with try-runtime
        run: |
          # Build only the runtime components needed for try-runtime
          cargo build --profile fast-ci --features try-runtime --package cere-runtime --package cere-dev-runtime
      - name: Check Try-Runtime (with timeout)
        run: |
          timeout 300 try-runtime --runtime ./target/fast-ci/wbuild/cere-runtime/cere_runtime.compact.compressed.wasm \
          on-runtime-upgrade --disable-idempotency-checks --blocktime 6000 live --uri wss://archive.qanet.cere.network:443 || echo "Try-runtime check timed out or failed, continuing..."
      - name: Run dev chain (quick test)
        run: |
          timeout --preserve-status 30s ./target/fast-ci/cere --dev || echo "Dev chain test completed"

  clippy:
    name: Run Clippy
    needs: format
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    env:
      CARGO_TERM_COLOR: always
      CARGO_INCREMENTAL: 1
      CI: true
    steps:
      - uses: actions/checkout@v4
      - name: Install linux dependencies
        run: sudo apt update && sudo apt install -y cargo clang libssl-dev llvm libudev-dev protobuf-compiler lld
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          target: wasm32-unknown-unknown
          components: rust-src, clippy
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.3
        with:
          cache-on-failure: true
          cache-all-crates: true
      - name: Configure Git
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      - name: Check with Clippy
        run: |
          cargo clippy --no-deps --all-targets --features runtime-benchmarks,try-runtime --workspace -- --deny warnings

  tests:
    name: Run tests
    needs: format
    # The type of runner that the job will run on
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    env:
      CARGO_TERM_COLOR: always
      CARGO_INCREMENTAL: 1
      CI: true
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Install linux dependencies
        run: sudo apt update && sudo apt install -y cargo clang libssl-dev llvm libudev-dev protobuf-compiler make lld
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          target: wasm32-unknown-unknown
          components: rust-src
      - name: Configure Git
        run: git config --global url."https://${{ secrets.GH_READ_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.3
        with:
          cache-on-failure: true
          cache-all-crates: true
      - name: Run tests
        run: |
          cargo test --verbose --locked --no-fail-fast --workspace --features runtime-benchmarks -- --skip mock_clusters_gov::__construct_runtime_integrity_test::runtime_integrity_tests
