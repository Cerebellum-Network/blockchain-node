name: Security Scans

on:
  push:
    branches: [ dev, staging, master ]
  pull_request:
    branches: [ dev, staging, master ]
  schedule:
    # Run security scans weekly on Monday at 8:00 AM UTC
    - cron: '0 8 * * 1'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install detect-secrets
        run: |
          pip install detect-secrets

      - name: Run detect-secrets scan
        run: |
          # Create baseline if it doesn't exist
          if [ ! -f .secrets.baseline ]; then
            detect-secrets scan --baseline .secrets.baseline
          fi
          
          # Run secret detection
          detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins
          
          # Audit results with simplified command
          detect-secrets audit .secrets.baseline --report

  container-scanning:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 180
    if: github.event_name == 'push' || github.event_name == 'schedule'
    permissions:
      contents: read
      id-token: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          # Remove unnecessary packages and clean up
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          # Clean Docker system
          docker system prune -af --volumes
          # Show available space
          df -h

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.SHARED_AWS_ACCOUNT_ID }}:role/github
          role-session-name: security-scan-${{ github.run_id }}
          aws-region: us-west-2
          mask-aws-account-id: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          build-args: |
            "PROFILE=release"
          tags: |
            cere-blockchain-node:scan-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar
        continue-on-error: false

      - name: Load Docker image
        run: |
          docker load -i /tmp/image.tar
          rm /tmp/image.tar
          docker images

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cere-blockchain-node:scan-${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          timeout: '10m'
        continue-on-error: true

      - name: Verify Docker image exists
        run: |
          if ! docker images | grep -q "cere-blockchain-node:scan-${{ github.sha }}"; then
            echo "Error: Docker image not found"
            exit 1
          fi
          echo "Docker image verified successfully"

      - name: Ensure SARIF file exists
        run: |
          if [ ! -f "trivy-results.sarif" ]; then
            echo "Warning: trivy-results.sarif not found, creating empty SARIF file"
            cat > trivy-results.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "version": "unknown"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          else
            echo "SARIF file found successfully"
          fi
          ls -la trivy-results.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy in table format
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cere-blockchain-node:scan-${{ github.sha }}'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          timeout: '10m'
        continue-on-error: true

      - name: Clean up Docker images
        if: always()
        run: |
          docker rmi cere-blockchain-node:scan-${{ github.sha }} || true
          docker system prune -f || true
          echo "Cleanup completed"

  dependency-scanning:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2024-10-01
          override: true

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Configure Git
        run: echo "Git configuration skipped - using public repositories only"

      - name: Check dependency tree for duplicates
        run: |
          cargo tree --duplicates > dependency-analysis.txt || true
          echo "ðŸ“¦ Dependency analysis completed"

      - name: Generate dependency report
        run: |
          echo "# Dependency Security Report" > dependency-report.md
          echo "Generated on: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md
          echo "## Dependency Tree Analysis" >> dependency-report.md
          echo '```' >> dependency-report.md
          cat dependency-analysis.txt >> dependency-report.md
          echo '```' >> dependency-report.md

      - name: Upload dependency analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-analysis
          path: |
            dependency-analysis.txt
            dependency-report.md

  code-scanning:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 180
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'
          config-file: ./.github/codeql/codeql-config.yml

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
