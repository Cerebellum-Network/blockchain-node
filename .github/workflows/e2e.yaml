name: E2E
on:
  push:
    branches:
      - 'dev'
  workflow_dispatch:

env:
  PROFILE: release

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency: dev
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Configure Git
        run: echo "Git configuration skipped - using public repositories only"

      - name: Cache cargo registry
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.DEV_NETWORK_AWS_ACCOUNT_ID }}:role/github
          role-session-name: ${{ github.event.repository.name }}
          aws-region: us-west-2
          mask-aws-account-id: true

      - name: Configure environment variables
        run: |
          echo "GITHUB_SHA=${GITHUB_SHA:0:7}" >> ${GITHUB_ENV}
          echo "CERE_RUNTIME=cere_runtime.compact.compressed.${GITHUB_SHA:0:7}.wasm" >> ${GITHUB_ENV}
          echo "CERE_DEV_RUNTIME=cere_dev_runtime.compact.compressed.${GITHUB_SHA:0:7}.wasm" >> ${GITHUB_ENV}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            PROFILE=${{ env.PROFILE }}
            BUILDKIT_INLINE_CACHE=1
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/pos-network-node:${{ env.GITHUB_SHA }}
            ${{ steps.login-ecr.outputs.registry }}/pos-network-node:dev-latest

      - name: Copy wasm artifacts from the image
        run: |
          CONTAINER_ID=$(docker create ${{ steps.login-ecr.outputs.registry }}/pos-network-node:${{ env.GITHUB_SHA }})

          docker cp "${CONTAINER_ID}:/data/cere-runtime-artifacts/cere_runtime.compact.compressed.wasm" "./${{ env.CERE_RUNTIME }}"
          docker cp "${CONTAINER_ID}:/data/cere-dev-runtime-artifacts/cere_dev_runtime.compact.compressed.wasm" "./${{ env.CERE_DEV_RUNTIME }}"

      - name: Upload cere-runtime wasm artifact
        uses: actions/upload-artifact@v4
        with:
          name: "cere_runtime.compact.compressed.${{ env.GITHUB_SHA }}.wasm"
          path: "./${{ env.CERE_RUNTIME }}"

      - name: Upload cere-dev-runtime wasm artifact
        uses: actions/upload-artifact@v4
        with:
          name: "cere_dev_runtime.compact.compressed.${{ env.GITHUB_SHA }}.wasm"
          path: "./${{ env.CERE_DEV_RUNTIME }}"
