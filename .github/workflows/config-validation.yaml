name: Configuration Validation
on:
  pull_request:
    paths: 
      - 'node/service/chain-specs/**'
      - 'schemas/**'
      - 'node/service/src/config_validation.rs'
  push:
    branches: [dev, staging, master]
    paths:
      - 'node/service/chain-specs/**'
      - 'schemas/**'
      - 'node/service/src/config_validation.rs'

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-schemas:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Dependencies
        run: |
          # Install Node.js tools for JSON schema validation
          npm install -g ajv-cli
          
          # Install Python tools for additional validation
          pip install jsonschema
          
      - name: Validate JSON Schema Syntax
        run: |
          echo "üîç Validating JSON schema syntax..."
          node -e "
            const fs = require('fs');
            const schema = JSON.parse(fs.readFileSync('schemas/chain-spec.schema.json', 'utf8'));
            console.log('‚úÖ JSON schema syntax is valid');
          "
          
      - name: Validate Chain Specifications Against Schema
        run: |
          echo "üìã Validating chain specifications against schema..."
          EXIT_CODE=0
          
          for spec in node/service/chain-specs/*.json; do
            echo "Validating $spec..."
            
            # Validate against JSON schema
            if ajv validate -s schemas/chain-spec.schema.json -d "$spec"; then
              echo "‚úÖ Schema validation passed for $spec"
            else
              echo "‚ùå Schema validation failed for $spec"
              EXIT_CODE=1
            fi
            
            # Additional Python validation
            python3 -c "
            import json
            import jsonschema
            
            with open('schemas/chain-spec.schema.json', 'r') as f:
                schema = json.load(f)
            
            with open('$spec', 'r') as f:
                spec_data = json.load(f)
            
            try:
                jsonschema.validate(spec_data, schema)
                print('‚úÖ Python validation passed for $spec')
            except jsonschema.ValidationError as e:
                print(f'‚ùå Python validation failed for $spec: {e}')
                exit(1)
            except Exception as e:
                print(f'‚ùå Validation error for $spec: {e}')
                exit(1)
            "
          done
          
          exit $EXIT_CODE
          
      - name: Security Validation
        run: |
          echo "üîí Running security validation checks..."
          EXIT_CODE=0
          
          # Check for development keys in production specs
          if grep -q "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY" node/service/chain-specs/mainnet.json 2>/dev/null; then
            echo "‚ùå Development key (Alice) found in mainnet spec"
            EXIT_CODE=1
          fi
          
          if grep -q "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty" node/service/chain-specs/mainnet.json 2>/dev/null; then
            echo "‚ùå Development key (Bob) found in mainnet spec"
            EXIT_CODE=1
          fi
          
          # Check for testnet security
          if grep -q "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY" node/service/chain-specs/testnet.json 2>/dev/null; then
            echo "‚ùå Development key (Alice) found in testnet spec"
            EXIT_CODE=1
          fi
          
          # Check for reasonable balance limits
          python3 -c "
          import json
          import os
          
          for spec_file in os.listdir('node/service/chain-specs/'):
              if spec_file.endswith('.json'):
                  spec_path = os.path.join('node/service/chain-specs/', spec_file)
                  with open(spec_path, 'r') as f:
                      spec = json.load(f)
                  
                  # Check balances
                  if 'genesis' in spec and 'runtime' in spec['genesis'] and 'balances' in spec['genesis']['runtime']:
                      balances = spec['genesis']['runtime']['balances'].get('balances', [])
                      for balance in balances:
                          if len(balance) >= 2:
                              amount = balance[1]
                              if amount > 1000000000000000:  # 1M CERE
                                  print(f'‚ùå Excessive balance found in {spec_file}: {amount}')
                                  exit(1)
                  
                  print(f'‚úÖ Balance validation passed for {spec_file}')
          "
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "‚úÖ All security validations passed"
          fi
          
          exit $EXIT_CODE
          
      - name: Environment-Specific Validation
        run: |
          echo "üåç Running environment-specific validation..."
          
          # Validate development environment
          if [ -f "node/service/chain-specs/devnet.json" ]; then
            ./scripts/validate-environment.sh dev
          fi
          
          # Validate staging environment
          if [ -f "node/service/chain-specs/testnet.json" ]; then
            ./scripts/validate-environment.sh staging
          fi
          
          # Validate production environment
          if [ -f "node/service/chain-specs/mainnet.json" ]; then
            ./scripts/validate-environment.sh prod
          fi

  validate-runtime-build:
    runs-on: ubuntu-latest
    needs: validate-schemas
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          target: wasm32-unknown-unknown
          override: true
          components: rust-src
          
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Add Dependencies to Cargo.toml
        run: |
          # Add jsonschema dependency to service crate
          cd node/service
          if ! grep -q "jsonschema" Cargo.toml; then
            echo 'jsonschema = "0.17"' >> Cargo.toml
          fi
          
      - name: Test Runtime Build with Specifications
        run: |
          echo "üèóÔ∏è Testing runtime build with chain specifications..."
          
          # Build the node first
          cargo build --release
          
          for spec in node/service/chain-specs/*.json; do
            echo "Testing runtime build with $spec..."
            
            # Test build-spec command
            ./target/release/cere build-spec --chain="$spec" --raw > /tmp/raw_spec.json
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Runtime build successful with $spec"
            else
              echo "‚ùå Runtime build failed with $spec"
              exit 1
            fi
            
            # Validate the raw spec is valid JSON
            if python3 -c "import json; json.load(open('/tmp/raw_spec.json'))" 2>/dev/null; then
              echo "‚úÖ Raw spec JSON is valid for $spec"
            else
              echo "‚ùå Raw spec JSON is invalid for $spec"
              exit 1
            fi
            
            # Test check-block command (if available)
            if ./target/release/cere check-block --help 2>/dev/null | grep -q "check-block"; then
              ./target/release/cere check-block --chain=/tmp/raw_spec.json 0 || echo "‚ö†Ô∏è Block check not available or failed"
            fi
          done
          
      - name: Run Configuration Validation Unit Tests
        run: |
          echo "üß™ Running configuration validation unit tests..."
          
          # Run tests for the config validation module
          cd node/service
          cargo test config_validation --lib
          
          # Run integration tests if they exist
          if [ -f "src/config_validation.rs" ]; then
            cargo test validate_runtime_config --features runtime-tests || echo "‚ö†Ô∏è Runtime tests not available"
          fi

  validate-cross-environment:
    runs-on: ubuntu-latest
    needs: validate-schemas
    steps:
      - uses: actions/checkout@v4
      
      - name: Cross-Environment Validation
        run: |
          echo "üîÑ Running cross-environment validation..."
          
          # Check that development chains have proper suffixes
          for spec in node/service/chain-specs/*dev*.json; do
            if [ -f "$spec" ]; then
              echo "Checking development spec: $spec"
              
              # Check that chainType is Development
              if ! grep -q '"chainType": "Development"' "$spec"; then
                echo "‚ùå Development spec $spec does not have Development chainType"
                exit 1
              fi
              
              # Check that id ends with _dev
              if ! grep -q '"id": ".*_dev"' "$spec"; then
                echo "‚ùå Development spec $spec does not have _dev suffix in id"
                exit 1
              fi
              
              echo "‚úÖ Development spec validation passed for $spec"
            fi
          done
          
          # Check production specs
          for spec in node/service/chain-specs/mainnet.json node/service/chain-specs/testnet.json; do
            if [ -f "$spec" ]; then
              echo "Checking production spec: $spec"
              
              # Check that chainType is not Development
              if grep -q '"chainType": "Development"' "$spec"; then
                echo "‚ùå Production spec $spec has Development chainType"
                exit 1
              fi
              
              # Check that id doesn't end with _dev
              if grep -q '"id": ".*_dev"' "$spec"; then
                echo "‚ùå Production spec $spec has _dev suffix in id"
                exit 1
              fi
              
              echo "‚úÖ Production spec validation passed for $spec"
            fi
          done
          
      - name: Generate Validation Report
        run: |
          echo "üìä Generating validation report..."
          
          {
            echo "# Configuration Validation Report"
            echo ""
            echo "## Summary"
            echo "- **Date**: $(date)"
            echo "- **Commit**: ${{ github.sha }}"
            echo "- **Branch**: ${{ github.ref_name }}"
            echo ""
            echo "## Validated Files"
            
            for spec in node/service/chain-specs/*.json; do
              if [ -f "$spec" ]; then
                echo "- ‚úÖ $spec"
              fi
            done
            
            echo ""
            echo "## Validation Results"
            echo "All configuration validations passed successfully."
            echo ""
            echo "## Next Steps"
            echo "Configuration files are ready for deployment to their respective environments."
          } > validation-report.md
          
          cat validation-report.md
          
      - name: Upload Validation Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-report
          path: validation-report.md 
