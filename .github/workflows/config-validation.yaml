name: Configuration Validation

on:
  pull_request:
    paths:
      - 'node/service/chain-specs/**'
      - 'schemas/**'
      - '.github/workflows/config-validation.yaml'
  push:
    branches: [ dev, staging, master ]
    paths:
      - 'node/service/chain-specs/**'
      - 'schemas/**'
  workflow_dispatch:

jobs:
  validate-schemas:
    runs-on: ubuntu-latest
    name: Validate Chain Specifications
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          npm install -g ajv-cli
          pip3 install jsonschema
          
      - name: Validate JSON Schema Syntax
        run: |
          echo "üîç Validating JSON schema syntax..."
          python3 -c "import json; json.load(open('schemas/chain-spec.schema.json'))"
          echo "‚úÖ Schema syntax is valid"
          
      - name: Validate Chain Specifications
        run: |
          echo "üìã Validating chain specifications against schema..."
          EXIT_CODE=0
          
          for spec in node/service/chain-specs/*.json; do
            echo "Validating $spec..."
            
            # Basic JSON validation
            if python3 -c "import json; json.load(open('$spec'))" 2>/dev/null; then
              echo "‚úÖ JSON syntax valid for $spec"
            else
              echo "‚ùå JSON syntax invalid for $spec"
              EXIT_CODE=1
              continue
            fi
            
            # Schema validation with ajv
            if ajv validate -s schemas/chain-spec.schema.json -d "$spec"; then
              echo "‚úÖ Schema validation passed for $spec"
            else
              echo "‚ùå Schema validation failed for $spec"
              EXIT_CODE=1
            fi
          done
          
          exit $EXIT_CODE
          
      - name: Security Validation
        run: |
          echo "üîí Running security validation checks..."
          EXIT_CODE=0
          
          # Check for development keys in production specs
          if [ -f "node/service/chain-specs/mainnet.json" ]; then
            if grep -q "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY" node/service/chain-specs/mainnet.json; then
              echo "‚ùå Development key (Alice) found in mainnet spec"
              EXIT_CODE=1
            fi
            
            if grep -q "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty" node/service/chain-specs/mainnet.json; then
              echo "‚ùå Development key (Bob) found in mainnet spec"
              EXIT_CODE=1
            fi
          fi
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "‚úÖ All security validations passed"
          fi
          
          exit $EXIT_CODE
          
      - name: Environment Validation
        run: |
          echo "üåç Running environment-specific validation..."
          
          # Make validation script executable
          chmod +x scripts/validate-environment.sh
          
          # Validate development environment
          if [ -f "node/service/chain-specs/devnet.json" ]; then
            echo "Validating development environment..."
            ./scripts/validate-environment.sh dev || echo "‚ö†Ô∏è Development validation had issues"
          fi
          
          # Validate staging environment
          if [ -f "node/service/chain-specs/testnet.json" ]; then
            echo "Validating staging environment..."
            ./scripts/validate-environment.sh staging || echo "‚ö†Ô∏è Staging validation had issues"
          fi
          
          # Validate production environment
          if [ -f "node/service/chain-specs/mainnet.json" ]; then
            echo "Validating production environment..."
            ./scripts/validate-environment.sh prod || echo "‚ö†Ô∏è Production validation had issues"
          fi
          
          echo "‚úÖ Environment validation completed"

  validate-runtime-build:
    runs-on: ubuntu-latest
    needs: validate-schemas
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2024-10-01
          target: wasm32-unknown-unknown
          override: true
          components: rust-src
          
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Test Runtime Build
        run: |
          echo "üèóÔ∏è Testing runtime build with chain specifications..."
          
          # Build the node
          cargo build --release --features runtime-benchmarks
          
          # Test with each chain spec
          for spec in node/service/chain-specs/*.json; do
            echo "Testing runtime build with $spec..."
            
            # Test build-spec command
            if timeout 300 ./target/release/cere build-spec --chain="$spec" --raw > /tmp/raw_spec.json 2>/dev/null; then
              echo "‚úÖ Runtime build successful with $spec"
            else
              echo "‚ùå Runtime build failed with $spec"
              exit 1
            fi
            
            # Validate the raw spec is valid JSON
            if python3 -c "import json; json.load(open('/tmp/raw_spec.json'))" 2>/dev/null; then
              echo "‚úÖ Raw spec JSON is valid for $spec"
            else
              echo "‚ùå Raw spec JSON is invalid for $spec"
              exit 1
            fi
          done
          
          echo "‚úÖ All runtime builds completed successfully"
