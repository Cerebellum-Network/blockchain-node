//! Autogenerated weights for pallet_ddc_customers
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.1.0
//! DATE: 2025-05-30, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `weights-15347690853`, CPU: `AMD EPYC-Rome-v4 Processor (no XSAVES)`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/cere
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_ddc_customers
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallet_ddc_customers_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ddc_customers.
pub trait WeightInfo {
	fn create_bucket() -> Weight;
	fn deposit() -> Weight;
	fn deposit_extra() -> Weight;
	fn deposit_for() -> Weight;
	fn unlock_deposit() -> Weight;
	fn withdraw_unlocked_deposit_update() -> Weight;
	fn withdraw_unlocked_deposit_kill() -> Weight;
	fn set_bucket_params() -> Weight;
	fn remove_bucket() -> Weight;
	fn migration_v3_buckets_step() -> Weight;
	fn migration_v4_ledgers_step() -> Weight;
}

/// Weights for pallet_ddc_customers using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `DdcCustomers::BucketsCount` (r:1 w:1)
	// Proof: `DdcCustomers::BucketsCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcCustomers::Buckets` (r:0 w:1)
	// Proof: `DdcCustomers::Buckets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_bucket() -> Weight {
		Weight::from_parts(31_218_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn deposit() -> Weight {
		Weight::from_parts(104_707_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn deposit_extra() -> Weight {
		Weight::from_parts(105_367_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn deposit_for() -> Weight {
		Weight::from_parts(114_063_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unlock_deposit() -> Weight {
		Weight::from_parts(31_489_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_unlocked_deposit_update() -> Weight {
		Weight::from_parts(95_489_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_unlocked_deposit_kill() -> Weight {
		Weight::from_parts(99_818_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcCustomers::Buckets` (r:1 w:1)
	// Proof: `DdcCustomers::Buckets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_bucket_params() -> Weight {
		Weight::from_parts(28_323_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcCustomers::Buckets` (r:1 w:1)
	// Proof: `DdcCustomers::Buckets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_bucket() -> Weight {
		Weight::from_parts(28_233_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcCustomers::Buckets` (r:2 w:1)
	// Proof: `DdcCustomers::Buckets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn migration_v3_buckets_step() -> Weight {
		Weight::from_parts(19_888_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:4 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: UNKNOWN KEY `0xaffb44e1082c7d59adbb5ebdf73bb14c422adb579f1dbf4f3886c5cfa3bb8cc4` (r:2 w:0)
	// Proof: UNKNOWN KEY `0xaffb44e1082c7d59adbb5ebdf73bb14c422adb579f1dbf4f3886c5cfa3bb8cc4` (r:2 w:0)
	// Storage: `DdcCustomers::ClusterLedger` (r:0 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn migration_v4_ledgers_step() -> Weight {
		Weight::from_parts(58_380_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `DdcCustomers::BucketsCount` (r:1 w:1)
	// Proof: `DdcCustomers::BucketsCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcCustomers::Buckets` (r:0 w:1)
	// Proof: `DdcCustomers::Buckets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_bucket() -> Weight {
		Weight::from_parts(31_218_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn deposit() -> Weight {
		Weight::from_parts(104_707_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn deposit_extra() -> Weight {
		Weight::from_parts(105_367_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn deposit_for() -> Weight {
		Weight::from_parts(114_063_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unlock_deposit() -> Weight {
		Weight::from_parts(31_489_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_unlocked_deposit_update() -> Weight {
		Weight::from_parts(95_489_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcCustomers::ClusterLedger` (r:1 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_unlocked_deposit_kill() -> Weight {
		Weight::from_parts(99_818_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcCustomers::Buckets` (r:1 w:1)
	// Proof: `DdcCustomers::Buckets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_bucket_params() -> Weight {
		Weight::from_parts(28_323_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcCustomers::Buckets` (r:1 w:1)
	// Proof: `DdcCustomers::Buckets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_bucket() -> Weight {
		Weight::from_parts(28_233_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcCustomers::Buckets` (r:2 w:1)
	// Proof: `DdcCustomers::Buckets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn migration_v3_buckets_step() -> Weight {
		Weight::from_parts(19_888_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:4 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: UNKNOWN KEY `0xaffb44e1082c7d59adbb5ebdf73bb14c422adb579f1dbf4f3886c5cfa3bb8cc4` (r:2 w:0)
	// Proof: UNKNOWN KEY `0xaffb44e1082c7d59adbb5ebdf73bb14c422adb579f1dbf4f3886c5cfa3bb8cc4` (r:2 w:0)
	// Storage: `DdcCustomers::ClusterLedger` (r:0 w:1)
	// Proof: `DdcCustomers::ClusterLedger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn migration_v4_ledgers_step() -> Weight {
		Weight::from_parts(58_380_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
