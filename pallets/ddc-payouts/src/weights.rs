//! Autogenerated weights for pallet_ddc_payouts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-07-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bench`, CPU: `AMD EPYC-Milan Processor`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/cere
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_ddc_payouts
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/frame-weight-template.hbs
// --output=pallets/ddc-payouts/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ddc_payouts.
pub trait WeightInfo {
	fn set_authorised_caller() -> Weight;
	fn begin_billing_report() -> Weight;
	fn begin_charging_customers() -> Weight;
	fn send_charging_customers_batch(b: u32, ) -> Weight;
	fn end_charging_customers() -> Weight;
	fn begin_rewarding_providers() -> Weight;
	fn send_rewarding_providers_batch(b: u32, ) -> Weight;
	fn end_rewarding_providers() -> Weight;
	fn end_billing_report() -> Weight;
}

/// Weights for pallet_ddc_payouts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `DdcPayouts::AuthorisedCaller` (r:0 w:1)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_authorised_caller() -> Weight {
		Weight::from_parts(12_694_000_u64, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn begin_billing_report() -> Weight {
		Weight::from_parts(26_119_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn begin_charging_customers() -> Weight {
		Weight::from_parts(28_303_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::ClustersGovParams` (r:1 w:0)
	// Proof: `DdcClusters::ClustersGovParams` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcCustomers::Ledger` (r:999 w:999)
	// Proof: `DdcCustomers::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `DdcPayouts::DebtorCustomers` (r:999 w:999)
	// Proof: `DdcPayouts::DebtorCustomers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 1000]`.
	fn send_charging_customers_batch(b: u32, ) -> Weight {
		Weight::from_parts(135_154_000_u64, 0)
			// Standard Error: 318_121
			.saturating_add(Weight::from_parts(79_437_612_u64, 0).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b as u64)))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::ClustersGovParams` (r:1 w:0)
	// Proof: `DdcClusters::ClustersGovParams` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:3 w:3)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Staking::Validators` (r:2 w:0)
	// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	// Storage: `Staking::Bonded` (r:1 w:0)
	// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	// Storage: `Staking::Ledger` (r:1 w:0)
	// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	// Storage: `Staking::Nominators` (r:1 w:0)
	// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	fn end_charging_customers() -> Weight {
		Weight::from_parts(281_087_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn begin_rewarding_providers() -> Weight {
		Weight::from_parts(29_155_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1000 w:1000)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 1000]`.
	fn send_rewarding_providers_batch(b: u32, ) -> Weight {
		Weight::from_parts(91_662_000_u64, 0)
			// Standard Error: 34_032
			.saturating_add(Weight::from_parts(62_733_592_u64, 0).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b as u64)))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn end_rewarding_providers() -> Weight {
		Weight::from_parts(29_986_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn end_billing_report() -> Weight {
		Weight::from_parts(29_615_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `DdcPayouts::AuthorisedCaller` (r:0 w:1)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_authorised_caller() -> Weight {
		Weight::from_parts(12_694_000_u64, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn begin_billing_report() -> Weight {
		Weight::from_parts(26_119_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn begin_charging_customers() -> Weight {
		Weight::from_parts(28_303_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::ClustersGovParams` (r:1 w:0)
	// Proof: `DdcClusters::ClustersGovParams` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcCustomers::Ledger` (r:999 w:999)
	// Proof: `DdcCustomers::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `DdcPayouts::DebtorCustomers` (r:999 w:999)
	// Proof: `DdcPayouts::DebtorCustomers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 1000]`.
	fn send_charging_customers_batch(b: u32, ) -> Weight {
		Weight::from_parts(135_154_000_u64, 0)
			// Standard Error: 318_121
			.saturating_add(Weight::from_parts(79_437_612_u64, 0).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(b as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(b as u64)))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::ClustersGovParams` (r:1 w:0)
	// Proof: `DdcClusters::ClustersGovParams` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:3 w:3)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Staking::Validators` (r:2 w:0)
	// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	// Storage: `Staking::Bonded` (r:1 w:0)
	// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	// Storage: `Staking::Ledger` (r:1 w:0)
	// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	// Storage: `Staking::Nominators` (r:1 w:0)
	// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	fn end_charging_customers() -> Weight {
		Weight::from_parts(281_087_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn begin_rewarding_providers() -> Weight {
		Weight::from_parts(29_155_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1000 w:1000)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 1000]`.
	fn send_rewarding_providers_batch(b: u32, ) -> Weight {
		Weight::from_parts(91_662_000_u64, 0)
			// Standard Error: 34_032
			.saturating_add(Weight::from_parts(62_733_592_u64, 0).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b as u64)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b as u64)))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn end_rewarding_providers() -> Weight {
		Weight::from_parts(29_986_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcPayouts::AuthorisedCaller` (r:1 w:0)
	// Proof: `DdcPayouts::AuthorisedCaller` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::ActiveBillingReports` (r:1 w:1)
	// Proof: `DdcPayouts::ActiveBillingReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn end_billing_report() -> Weight {
		Weight::from_parts(29_615_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
