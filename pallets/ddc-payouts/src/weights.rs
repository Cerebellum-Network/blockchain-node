//! Autogenerated weights for pallet_ddc_payouts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-30, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Yahors-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/cere
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --pallet=pallet-ddc-payouts
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/frame-weight-template-clippy.hbs
// --output=pallets/ddc-payouts/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ddc_payouts.
pub trait WeightInfo {
	fn set_authorised_caller() -> Weight;
	fn begin_billing_report() -> Weight;
	fn begin_charging_customers() -> Weight;
	fn send_charging_customers_batch(b: u32, ) -> Weight;
	fn end_charging_customers() -> Weight;
	fn begin_rewarding_providers() -> Weight;
	fn send_rewarding_providers_batch(b: u32, ) -> Weight;
	fn end_rewarding_providers() -> Weight;
	fn end_billing_report() -> Weight;
}

/// Weights for pallet_ddc_payouts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DdcPayouts AuthorisedCaller (r:0 w:1)
	fn set_authorised_caller() -> Weight {
		Weight::from_ref_time(251_000_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	fn begin_billing_report() -> Weight {
		Weight::from_ref_time(466_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	fn begin_charging_customers() -> Weight {
		Weight::from_ref_time(440_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	// Storage: DdcClusters ClustersGovParams (r:1 w:0)
	// Storage: DdcCustomers Ledger (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: DdcPayouts DebtorCustomers (r:1 w:1)
	/// The range of component `b` is `[1, 1000]`.
	fn send_charging_customers_batch(b: u32, ) -> Weight {
		Weight::from_ref_time(1_267_000_000_u64)
			// Standard Error: 3_691_054
			.saturating_add(Weight::from_ref_time(557_422_673_u64).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(b as u64)))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	// Storage: DdcClusters ClustersGovParams (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: DdcClusters Clusters (r:1 w:0)
	// Storage: Staking CounterForValidators (r:1 w:0)
	// Storage: Staking Validators (r:2 w:0)
	fn end_charging_customers() -> Weight {
		Weight::from_ref_time(1_978_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	fn begin_rewarding_providers() -> Weight {
		Weight::from_ref_time(446_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	/// The range of component `b` is `[1, 1000]`.
	fn send_rewarding_providers_batch(b: u32, ) -> Weight {
		Weight::from_ref_time(758_000_000_u64)
			// Standard Error: 148_210
			.saturating_add(Weight::from_ref_time(336_218_526_u64).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b as u64)))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b as u64)))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	fn end_rewarding_providers() -> Weight {
		Weight::from_ref_time(458_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	fn end_billing_report() -> Weight {
		Weight::from_ref_time(449_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DdcPayouts AuthorisedCaller (r:0 w:1)
	fn set_authorised_caller() -> Weight {
		Weight::from_ref_time(251_000_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	fn begin_billing_report() -> Weight {
		Weight::from_ref_time(466_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	fn begin_charging_customers() -> Weight {
		Weight::from_ref_time(440_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	// Storage: DdcClusters ClustersGovParams (r:1 w:0)
	// Storage: DdcCustomers Ledger (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: DdcPayouts DebtorCustomers (r:1 w:1)
	/// The range of component `b` is `[1, 1000]`.
	fn send_charging_customers_batch(b: u32, ) -> Weight {
		Weight::from_ref_time(1_267_000_000_u64)
			// Standard Error: 3_691_054
			.saturating_add(Weight::from_ref_time(557_422_673_u64).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(b as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(b as u64)))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	// Storage: DdcClusters ClustersGovParams (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: DdcClusters Clusters (r:1 w:0)
	// Storage: Staking CounterForValidators (r:1 w:0)
	// Storage: Staking Validators (r:2 w:0)
	fn end_charging_customers() -> Weight {
		Weight::from_ref_time(1_978_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	fn begin_rewarding_providers() -> Weight {
		Weight::from_ref_time(446_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	/// The range of component `b` is `[1, 1000]`.
	fn send_rewarding_providers_batch(b: u32, ) -> Weight {
		Weight::from_ref_time(758_000_000_u64)
			// Standard Error: 148_210
			.saturating_add(Weight::from_ref_time(336_218_526_u64).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(b as u64)))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b as u64)))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	fn end_rewarding_providers() -> Weight {
		Weight::from_ref_time(458_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: DdcPayouts AuthorisedCaller (r:1 w:0)
	// Storage: DdcPayouts ActiveBillingReports (r:1 w:1)
	fn end_billing_report() -> Weight {
		Weight::from_ref_time(449_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
