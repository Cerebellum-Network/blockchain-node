
//! Autogenerated weights for `pallet_ddc_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-02, STEPS: `500`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/cere
// benchmark
// pallet
// --chain=dev
// --steps=500
// --repeat=200
// --pallet=pallet_ddc_staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./frame/ddc-staking/src

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;


/// Weight functions needed for pallet_staking.
pub trait WeightInfo {
	fn bond() -> Weight;
	fn unbond() -> Weight;
	fn withdraw_unbonded() -> Weight;
	fn store() -> Weight;
	fn serve() -> Weight;
	fn chill() -> Weight;
	fn set_controller() -> Weight;
}

/// Weight functions for `pallet_ddc_staking`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DdcStaking Bonded (r:1 w:1)
	// Storage: DdcStaking Ledger (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn bond() -> Weight {
		Weight::from_ref_time(51_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: DdcStaking Ledger (r:1 w:0)
	fn unbond() -> Weight {
		Weight::from_ref_time(10_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: DdcStaking Ledger (r:1 w:1)
	// Storage: DdcStaking CurrentEra (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn withdraw_unbonded() -> Weight {
		Weight::from_ref_time(46_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: DdcStaking Ledger (r:1 w:0)
	// Storage: DdcStaking MinStorageBond (r:1 w:0)
	// Storage: DdcStaking Edges (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:1)
	// Storage: DdcStaking CounterForStorages (r:1 w:1)
	fn store() -> Weight {
		Weight::from_ref_time(22_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: DdcStaking Ledger (r:1 w:0)
	// Storage: DdcStaking MinEdgeBond (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:0)
	// Storage: DdcStaking Edges (r:1 w:1)
	// Storage: DdcStaking CounterForEdges (r:1 w:1)
	fn serve() -> Weight {
		Weight::from_ref_time(22_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: DdcStaking Ledger (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:0)
	// Storage: DdcStaking Edges (r:1 w:0)
	fn chill() -> Weight {
		Weight::from_ref_time(15_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
	}
	// Storage: DdcStaking Bonded (r:1 w:1)
	// Storage: DdcStaking Ledger (r:2 w:2)
	fn set_controller() -> Weight {
		Weight::from_ref_time(20_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

impl WeightInfo for () {
	fn bond() -> Weight {
		Weight::from_ref_time(51_000_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn unbond() -> Weight {
		Weight::from_ref_time(10_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	fn withdraw_unbonded() -> Weight {
		Weight::from_ref_time(46_000_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn store() -> Weight {
		Weight::from_ref_time(22_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn serve() -> Weight {
		Weight::from_ref_time(22_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn chill() -> Weight {
		Weight::from_ref_time(15_000_000)
			.saturating_add(RocksDbWeight::get().reads(3))
	}
	fn set_controller() -> Weight {
		Weight::from_ref_time(20_000_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
}
