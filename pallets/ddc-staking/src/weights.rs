//! Autogenerated weights for pallet_ddc_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-01, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `e14`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/cere
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_ddc_staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/ddc-staking/src

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ddc_staking.
pub trait WeightInfo {
	fn bond() -> Weight;
	fn unbond() -> Weight;
	fn withdraw_unbonded() -> Weight;
	fn store() -> Weight;
	fn serve() -> Weight;
	fn chill() -> Weight;
	fn set_controller() -> Weight;
	fn allow_cluster_manager() -> Weight;
	fn disallow_cluster_manager() -> Weight;
}

/// Weights for pallet_ddc_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: DdcStaking Bonded (r:1 w:1)
	// Storage: DdcStaking Ledger (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn bond() -> Weight {
		Weight::from_ref_time(49_113_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: DdcStaking Ledger (r:1 w:1)
	// Storage: DdcStaking Edges (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:0)
	// Storage: DdcStaking CurrentEra (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn unbond() -> Weight {
		Weight::from_ref_time(47_727_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: DdcStaking Ledger (r:1 w:1)
	// Storage: DdcStaking CurrentEra (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn withdraw_unbonded() -> Weight {
		Weight::from_ref_time(69_750_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: DdcStaking Ledger (r:1 w:0)
	// Storage: DdcStaking Settings (r:1 w:0)
	// Storage: DdcStaking Edges (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:1)
	fn store() -> Weight {
		Weight::from_ref_time(26_112_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: DdcStaking Ledger (r:1 w:0)
	// Storage: DdcStaking Settings (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:0)
	// Storage: DdcStaking Edges (r:1 w:1)
	fn serve() -> Weight {
		Weight::from_ref_time(19_892_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: DdcStaking Ledger (r:1 w:1)
	// Storage: DdcStaking CurrentEra (r:1 w:0)
	// Storage: DdcStaking Edges (r:1 w:1)
	// Storage: DdcStaking Settings (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:0)
	fn chill() -> Weight {
		Weight::from_ref_time(77_450_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: DdcStaking Bonded (r:1 w:1)
	// Storage: DdcStaking Ledger (r:2 w:2)
	fn set_controller() -> Weight {
		Weight::from_ref_time(38_521_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: DdcStaking ClusterManagers (r:1 w:1)
	fn allow_cluster_manager() -> Weight {
		Weight::from_ref_time(11_727_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: DdcStaking ClusterManagers (r:1 w:1)
	fn disallow_cluster_manager() -> Weight {
		Weight::from_ref_time(18_006_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: DdcStaking Bonded (r:1 w:1)
	// Storage: DdcStaking Ledger (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	fn bond() -> Weight {
		Weight::from_ref_time(49_113_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: DdcStaking Ledger (r:1 w:1)
	// Storage: DdcStaking Edges (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:0)
	// Storage: DdcStaking CurrentEra (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn unbond() -> Weight {
		Weight::from_ref_time(47_727_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: DdcStaking Ledger (r:1 w:1)
	// Storage: DdcStaking CurrentEra (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn withdraw_unbonded() -> Weight {
		Weight::from_ref_time(69_750_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: DdcStaking Ledger (r:1 w:0)
	// Storage: DdcStaking Settings (r:1 w:0)
	// Storage: DdcStaking Edges (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:1)
	fn store() -> Weight {
		Weight::from_ref_time(26_112_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: DdcStaking Ledger (r:1 w:0)
	// Storage: DdcStaking Settings (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:0)
	// Storage: DdcStaking Edges (r:1 w:1)
	fn serve() -> Weight {
		Weight::from_ref_time(19_892_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: DdcStaking Ledger (r:1 w:1)
	// Storage: DdcStaking CurrentEra (r:1 w:0)
	// Storage: DdcStaking Edges (r:1 w:1)
	// Storage: DdcStaking Settings (r:1 w:0)
	// Storage: DdcStaking Storages (r:1 w:0)
	fn chill() -> Weight {
		Weight::from_ref_time(77_450_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: DdcStaking Bonded (r:1 w:1)
	// Storage: DdcStaking Ledger (r:2 w:2)
	fn set_controller() -> Weight {
		Weight::from_ref_time(38_521_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: DdcStaking ClusterManagers (r:1 w:1)
	fn allow_cluster_manager() -> Weight {
		Weight::from_ref_time(11_727_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: DdcStaking ClusterManagers (r:1 w:1)
	fn disallow_cluster_manager() -> Weight {
		Weight::from_ref_time(18_006_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
