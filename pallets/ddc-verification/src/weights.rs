//! Autogenerated weights for pallet_ddc_verification
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-01-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bench`, CPU: `AMD EPYC Processor`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/cere
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --pallet=pallet_ddc_verification
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/frame-weight-template.hbs
// --output=pallets/ddc-verification/src/weights3.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ddc_verification.
pub trait WeightInfo {
	fn set_validator_key() -> Weight;
	fn emit_consensus_errors(b: u32, ) -> Weight;
	fn force_skip_inspection() -> Weight;
	fn force_set_validator_key() -> Weight;
}

/// Weights for pallet_ddc_verification using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `Staking::Ledger` (r:1 w:0)
	// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	// Storage: `Staking::Bonded` (r:1 w:0)
	// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	// Storage: `DdcVerification::ValidatorSet` (r:1 w:0)
	// Proof: `DdcVerification::ValidatorSet` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcVerification::ValidatorToStashKey` (r:0 w:1)
	// Proof: `DdcVerification::ValidatorToStashKey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_validator_key() -> Weight {
		Weight::from_parts(47_030_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcVerification::ValidatorToStashKey` (r:1 w:0)
	// Proof: `DdcVerification::ValidatorToStashKey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcVerification::ValidatorSet` (r:1 w:0)
	// Proof: `DdcVerification::ValidatorSet` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 5]`.
	fn emit_consensus_errors(b: u32, ) -> Weight {
		Weight::from_parts(21_243_502_u64, 0)
			// Standard Error: 16_284
			.saturating_add(Weight::from_parts(3_208_119_u64, 0).saturating_mul(b as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:1)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::PayoutFingerprints` (r:0 w:1)
	// Proof: `DdcPayouts::PayoutFingerprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::PayoutReceipts` (r:0 w:1)
	// Proof: `DdcPayouts::PayoutReceipts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_skip_inspection() -> Weight {
		Weight::from_parts(41_167_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn force_set_validator_key() -> Weight {
		Weight::from_parts(41_167_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Staking::Ledger` (r:1 w:0)
	// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	// Storage: `Staking::Bonded` (r:1 w:0)
	// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	// Storage: `DdcVerification::ValidatorSet` (r:1 w:0)
	// Proof: `DdcVerification::ValidatorSet` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `DdcVerification::ValidatorToStashKey` (r:0 w:1)
	// Proof: `DdcVerification::ValidatorToStashKey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_validator_key() -> Weight {
		Weight::from_parts(47_030_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcVerification::ValidatorToStashKey` (r:1 w:0)
	// Proof: `DdcVerification::ValidatorToStashKey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcVerification::ValidatorSet` (r:1 w:0)
	// Proof: `DdcVerification::ValidatorSet` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `b` is `[1, 5]`.
	fn emit_consensus_errors(b: u32, ) -> Weight {
		Weight::from_parts(21_243_502_u64, 0)
			// Standard Error: 16_284
			.saturating_add(Weight::from_parts(3_208_119_u64, 0).saturating_mul(b as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:1)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::PayoutFingerprints` (r:0 w:1)
	// Proof: `DdcPayouts::PayoutFingerprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcPayouts::PayoutReceipts` (r:0 w:1)
	// Proof: `DdcPayouts::PayoutReceipts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_skip_inspection() -> Weight {
		Weight::from_parts(41_167_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn force_set_validator_key() -> Weight {
		Weight::from_parts(41_167_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
