//! Autogenerated weights for pallet_ddc_clusters_gov
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-07-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bench`, CPU: `AMD EPYC-Milan Processor`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/cere
// benchmark
// pallet
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_ddc_clusters_gov
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/frame-weight-template.hbs
// --output=pallets/ddc-clusters-gov/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ddc_clusters_gov.
pub trait WeightInfo {
	fn propose_activate_cluster_protocol() -> Weight;
	fn propose_update_cluster_protocol() -> Weight;
	fn vote_proposal() -> Weight;
	fn close_early_approved(m: u32, ) -> Weight;
	fn close_approved(m: u32, ) -> Weight;
	fn close_early_disapproved(m: u32, ) -> Weight;
	fn close_disapproved(m: u32, ) -> Weight;
	fn retract_proposal() -> Weight;
	fn refund_submission_deposit() -> Weight;
	fn activate_cluster_protocol() -> Weight;
	fn update_cluster_protocol() -> Weight;
}

/// Weights for pallet_ddc_clusters_gov using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::ClustersNodesStats` (r:1 w:0)
	// Proof: `DdcClusters::ClustersNodesStats` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:0 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_activate_cluster_protocol() -> Weight {
		Weight::from_parts(40_987_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::ClustersNodesStats` (r:1 w:0)
	// Proof: `DdcClusters::ClustersNodesStats` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:0 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_update_cluster_protocol() -> Weight {
		Weight::from_parts(40_476_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::ClustersNodes` (r:1 w:0)
	// Proof: `DdcClusters::ClustersNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcNodes::StorageNodes` (r:1 w:0)
	// Proof: `DdcNodes::StorageNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote_proposal() -> Weight {
		Weight::from_parts(44_935_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Preimage::StatusFor` (r:1 w:1)
	// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Referenda::ReferendumCount` (r:1 w:1)
	// Proof: `Referenda::ReferendumCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(107022), added: 109497, mode: `MaxEncodedLen`)
	// Storage: `Referenda::ReferendumInfoFor` (r:0 w:1)
	// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
	// Storage: `DdcClustersGov::SubmissionDeposits` (r:0 w:1)
	// Proof: `DdcClustersGov::SubmissionDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Preimage::PreimageFor` (r:0 w:1)
	// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[4, 64]`.
	fn close_early_approved(m: u32, ) -> Weight {
		Weight::from_parts(200_906_983_u64, 0)
			// Standard Error: 6_098
			.saturating_add(Weight::from_parts(224_016_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Preimage::StatusFor` (r:1 w:1)
	// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Referenda::ReferendumCount` (r:1 w:1)
	// Proof: `Referenda::ReferendumCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(107022), added: 109497, mode: `MaxEncodedLen`)
	// Storage: `Referenda::ReferendumInfoFor` (r:0 w:1)
	// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
	// Storage: `DdcClustersGov::SubmissionDeposits` (r:0 w:1)
	// Proof: `DdcClustersGov::SubmissionDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Preimage::PreimageFor` (r:0 w:1)
	// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[4, 64]`.
	fn close_approved(m: u32, ) -> Weight {
		Weight::from_parts(253_269_234_u64, 0)
			// Standard Error: 11_311
			.saturating_add(Weight::from_parts(102_968_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:0 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 64]`.
	fn close_early_disapproved(m: u32, ) -> Weight {
		Weight::from_parts(44_770_482_u64, 0)
			// Standard Error: 2_212
			.saturating_add(Weight::from_parts(126_113_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:0 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 64]`.
	fn close_disapproved(m: u32, ) -> Weight {
		Weight::from_parts(73_437_989_u64, 0)
			// Standard Error: 3_685
			.saturating_add(Weight::from_parts(6_156_u64, 0).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClustersGov::ClusterProposal` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:0 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn retract_proposal() -> Weight {
		Weight::from_parts(24_526_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClustersGov::SubmissionDeposits` (r:1 w:1)
	// Proof: `DdcClustersGov::SubmissionDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Referenda::ReferendumInfoFor` (r:1 w:1)
	// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn refund_submission_deposit() -> Weight {
		Weight::from_parts(120_817_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:1)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::ClustersGovParams` (r:1 w:1)
	// Proof: `DdcClusters::ClustersGovParams` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn activate_cluster_protocol() -> Weight {
		Weight::from_parts(39_905_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::ClustersGovParams` (r:1 w:1)
	// Proof: `DdcClusters::ClustersGovParams` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_cluster_protocol() -> Weight {
		Weight::from_parts(25_347_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::ClustersNodesStats` (r:1 w:0)
	// Proof: `DdcClusters::ClustersNodesStats` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:0 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_activate_cluster_protocol() -> Weight {
		Weight::from_parts(40_987_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::ClustersNodesStats` (r:1 w:0)
	// Proof: `DdcClusters::ClustersNodesStats` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:0 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_update_cluster_protocol() -> Weight {
		Weight::from_parts(40_476_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::ClustersNodes` (r:1 w:0)
	// Proof: `DdcClusters::ClustersNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcNodes::StorageNodes` (r:1 w:0)
	// Proof: `DdcNodes::StorageNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote_proposal() -> Weight {
		Weight::from_parts(44_935_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Preimage::StatusFor` (r:1 w:1)
	// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Referenda::ReferendumCount` (r:1 w:1)
	// Proof: `Referenda::ReferendumCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(107022), added: 109497, mode: `MaxEncodedLen`)
	// Storage: `Referenda::ReferendumInfoFor` (r:0 w:1)
	// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
	// Storage: `DdcClustersGov::SubmissionDeposits` (r:0 w:1)
	// Proof: `DdcClustersGov::SubmissionDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Preimage::PreimageFor` (r:0 w:1)
	// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[4, 64]`.
	fn close_early_approved(m: u32, ) -> Weight {
		Weight::from_parts(200_906_983_u64, 0)
			// Standard Error: 6_098
			.saturating_add(Weight::from_parts(224_016_u64, 0).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Preimage::StatusFor` (r:1 w:1)
	// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Referenda::ReferendumCount` (r:1 w:1)
	// Proof: `Referenda::ReferendumCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Scheduler::Agenda` (r:1 w:1)
	// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(107022), added: 109497, mode: `MaxEncodedLen`)
	// Storage: `Referenda::ReferendumInfoFor` (r:0 w:1)
	// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
	// Storage: `DdcClustersGov::SubmissionDeposits` (r:0 w:1)
	// Proof: `DdcClustersGov::SubmissionDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Preimage::PreimageFor` (r:0 w:1)
	// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[4, 64]`.
	fn close_approved(m: u32, ) -> Weight {
		Weight::from_parts(253_269_234_u64, 0)
			// Standard Error: 11_311
			.saturating_add(Weight::from_parts(102_968_u64, 0).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:0 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 64]`.
	fn close_early_disapproved(m: u32, ) -> Weight {
		Weight::from_parts(44_770_482_u64, 0)
			// Standard Error: 2_212
			.saturating_add(Weight::from_parts(126_113_u64, 0).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:0)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposal` (r:0 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[4, 64]`.
	fn close_disapproved(m: u32, ) -> Weight {
		Weight::from_parts(73_437_989_u64, 0)
			// Standard Error: 3_685
			.saturating_add(Weight::from_parts(6_156_u64, 0).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClustersGov::ClusterProposal` (r:1 w:1)
	// Proof: `DdcClustersGov::ClusterProposal` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClustersGov::ClusterProposalVoting` (r:0 w:1)
	// Proof: `DdcClustersGov::ClusterProposalVoting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn retract_proposal() -> Weight {
		Weight::from_parts(24_526_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClustersGov::SubmissionDeposits` (r:1 w:1)
	// Proof: `DdcClustersGov::SubmissionDeposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Referenda::ReferendumInfoFor` (r:1 w:1)
	// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:2)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn refund_submission_deposit() -> Weight {
		Weight::from_parts(120_817_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	// Storage: `DdcClusters::Clusters` (r:1 w:1)
	// Proof: `DdcClusters::Clusters` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcClusters::ClustersGovParams` (r:1 w:1)
	// Proof: `DdcClusters::ClustersGovParams` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn activate_cluster_protocol() -> Weight {
		Weight::from_parts(39_905_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: `DdcClusters::ClustersGovParams` (r:1 w:1)
	// Proof: `DdcClusters::ClustersGovParams` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_cluster_protocol() -> Weight {
		Weight::from_parts(25_347_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
