//! Autogenerated weights for pallet_ddc_nodes
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.1.0
//! DATE: 2025-05-30, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `weights-15347690853`, CPU: `AMD EPYC-Rome-v4 Processor (no XSAVES)`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/cere
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_ddc_nodes
// --extrinsic=*
// --steps=50
// --repeat=20
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallet_ddc_nodes_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ddc_nodes.
pub trait WeightInfo {
	fn create_node() -> Weight;
	fn delete_node() -> Weight;
	fn set_node_params() -> Weight;
	fn migration_v2_nodes_step() -> Weight;
}

/// Weights for pallet_ddc_nodes using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: `DdcNodes::StorageNodes` (r:1 w:1)
	// Proof: `DdcNodes::StorageNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_node() -> Weight {
		Weight::from_parts(23_293_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcNodes::StorageNodes` (r:1 w:1)
	// Proof: `DdcNodes::StorageNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcStaking::Nodes` (r:1 w:0)
	// Proof: `DdcStaking::Nodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delete_node() -> Weight {
		Weight::from_parts(32_761_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcNodes::StorageNodes` (r:1 w:1)
	// Proof: `DdcNodes::StorageNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_node_params() -> Weight {
		Weight::from_parts(32_550_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: `DdcNodes::StorageNodes` (r:2 w:1)
	// Proof: `DdcNodes::StorageNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn migration_v2_nodes_step() -> Weight {
		Weight::from_parts(20_549_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `DdcNodes::StorageNodes` (r:1 w:1)
	// Proof: `DdcNodes::StorageNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_node() -> Weight {
		Weight::from_parts(23_293_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcNodes::StorageNodes` (r:1 w:1)
	// Proof: `DdcNodes::StorageNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `DdcStaking::Nodes` (r:1 w:0)
	// Proof: `DdcStaking::Nodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delete_node() -> Weight {
		Weight::from_parts(32_761_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcNodes::StorageNodes` (r:1 w:1)
	// Proof: `DdcNodes::StorageNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_node_params() -> Weight {
		Weight::from_parts(32_550_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: `DdcNodes::StorageNodes` (r:2 w:1)
	// Proof: `DdcNodes::StorageNodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn migration_v2_nodes_step() -> Weight {
		Weight::from_parts(20_549_000_u64, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
